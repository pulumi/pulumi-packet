// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package packet

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Packet device resource. This can be used to create,
// modify, and delete devices.
// 
// > **Note:** All arguments including the root_password and user_data will be stored in
//  the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
// 
type Device struct {
	s *pulumi.ResourceState
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOpt) (*Device, error) {
	if args == nil || args.BillingCycle == nil {
		return nil, errors.New("missing required argument 'BillingCycle'")
	}
	if args == nil || args.Facility == nil {
		return nil, errors.New("missing required argument 'Facility'")
	}
	if args == nil || args.Hostname == nil {
		return nil, errors.New("missing required argument 'Hostname'")
	}
	if args == nil || args.OperatingSystem == nil {
		return nil, errors.New("missing required argument 'OperatingSystem'")
	}
	if args == nil || args.Plan == nil {
		return nil, errors.New("missing required argument 'Plan'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alwaysPxe"] = nil
		inputs["billingCycle"] = nil
		inputs["description"] = nil
		inputs["facility"] = nil
		inputs["hardwareReservationId"] = nil
		inputs["hostname"] = nil
		inputs["ipxeScriptUrl"] = nil
		inputs["operatingSystem"] = nil
		inputs["plan"] = nil
		inputs["projectId"] = nil
		inputs["publicIpv4SubnetSize"] = nil
		inputs["storage"] = nil
		inputs["tags"] = nil
		inputs["userData"] = nil
	} else {
		inputs["alwaysPxe"] = args.AlwaysPxe
		inputs["billingCycle"] = args.BillingCycle
		inputs["description"] = args.Description
		inputs["facility"] = args.Facility
		inputs["hardwareReservationId"] = args.HardwareReservationId
		inputs["hostname"] = args.Hostname
		inputs["ipxeScriptUrl"] = args.IpxeScriptUrl
		inputs["operatingSystem"] = args.OperatingSystem
		inputs["plan"] = args.Plan
		inputs["projectId"] = args.ProjectId
		inputs["publicIpv4SubnetSize"] = args.PublicIpv4SubnetSize
		inputs["storage"] = args.Storage
		inputs["tags"] = args.Tags
		inputs["userData"] = args.UserData
	}
	inputs["accessPrivateIpv4"] = nil
	inputs["accessPublicIpv4"] = nil
	inputs["accessPublicIpv6"] = nil
	inputs["created"] = nil
	inputs["locked"] = nil
	inputs["networks"] = nil
	inputs["rootPassword"] = nil
	inputs["state"] = nil
	inputs["updated"] = nil
	s, err := ctx.RegisterResource("packet:index/device:Device", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Device{s: s}, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DeviceState, opts ...pulumi.ResourceOpt) (*Device, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessPrivateIpv4"] = state.AccessPrivateIpv4
		inputs["accessPublicIpv4"] = state.AccessPublicIpv4
		inputs["accessPublicIpv6"] = state.AccessPublicIpv6
		inputs["alwaysPxe"] = state.AlwaysPxe
		inputs["billingCycle"] = state.BillingCycle
		inputs["created"] = state.Created
		inputs["description"] = state.Description
		inputs["facility"] = state.Facility
		inputs["hardwareReservationId"] = state.HardwareReservationId
		inputs["hostname"] = state.Hostname
		inputs["ipxeScriptUrl"] = state.IpxeScriptUrl
		inputs["locked"] = state.Locked
		inputs["networks"] = state.Networks
		inputs["operatingSystem"] = state.OperatingSystem
		inputs["plan"] = state.Plan
		inputs["projectId"] = state.ProjectId
		inputs["publicIpv4SubnetSize"] = state.PublicIpv4SubnetSize
		inputs["rootPassword"] = state.RootPassword
		inputs["state"] = state.State
		inputs["storage"] = state.Storage
		inputs["tags"] = state.Tags
		inputs["updated"] = state.Updated
		inputs["userData"] = state.UserData
	}
	s, err := ctx.ReadResource("packet:index/device:Device", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Device{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Device) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Device) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ipv4 private IP assigned to the device
func (r *Device) AccessPrivateIpv4() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessPrivateIpv4"])
}

// The ipv4 maintenance IP assigned to the device
func (r *Device) AccessPublicIpv4() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessPublicIpv4"])
}

// The ipv6 maintenance IP assigned to the device
func (r *Device) AccessPublicIpv6() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessPublicIpv6"])
}

// If true, a device with OS `custom_ipxe` will
// continue to boot via iPXE on reboots.
func (r *Device) AlwaysPxe() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["alwaysPxe"])
}

// monthly or hourly
func (r *Device) BillingCycle() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["billingCycle"])
}

// The timestamp for when the device was created
func (r *Device) Created() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["created"])
}

// Description string for the device
func (r *Device) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The facility in which to create the device. To find the facility code, visit [Facilities API docs](https://www.packet.net/developers/api/#facilities), set your API auth token in the top of the page and see JSON from the API response.
func (r *Device) Facility() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["facility"])
}

// The id of hardware reservation where you want this device deployed, or `next-available` if you want to pick your next available reservation automatically.
func (r *Device) HardwareReservationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hardwareReservationId"])
}

// The device name
func (r *Device) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

// URL pointing to a hosted iPXE script. More
// information is in the
// [Custom iPXE](https://help.packet.net/article/26-custom-ipxe)
// doc.
func (r *Device) IpxeScriptUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipxeScriptUrl"])
}

// Whether the device is locked
func (r *Device) Locked() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["locked"])
}

// The device's private and public IP (v4 and v6) network details
func (r *Device) Networks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networks"])
}

// The operating system slug. To find the slug, or visit [Operating Systems API docs](https://www.packet.net/developers/api/#operatingsystems), set your API auth token in the top of the page and see JSON from the API response.
func (r *Device) OperatingSystem() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["operatingSystem"])
}

// The device plan slug. To find the plan slug, visit [Device plans API docs](https://www.packet.net/developers/api/#plans), set your auth token in the top of the page and see JSON from the API response.
func (r *Device) Plan() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["plan"])
}

// The id of the project in which to create the device
func (r *Device) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// Size of allocated subnet, more
// information is in the
// [Custom Subnet Size](https://help.packet.net/article/55-custom-subnet-size) doc.
func (r *Device) PublicIpv4SubnetSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["publicIpv4SubnetSize"])
}

// Root password to the server (disabled after 24 hours)
func (r *Device) RootPassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rootPassword"])
}

// The status of the device
func (r *Device) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// JSON for custom partitioning. Only usable on reserved hardware. More information in in the [Custom Partitioning and RAID](https://help.packet.net/article/61-custom-partitioning-raid) doc.
func (r *Device) Storage() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["storage"])
}

// Tags attached to the device
func (r *Device) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The timestamp for the last time the device was updated
func (r *Device) Updated() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updated"])
}

// A string of the desired User Data for the device.
func (r *Device) UserData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userData"])
}

// Input properties used for looking up and filtering Device resources.
type DeviceState struct {
	// The ipv4 private IP assigned to the device
	AccessPrivateIpv4 interface{}
	// The ipv4 maintenance IP assigned to the device
	AccessPublicIpv4 interface{}
	// The ipv6 maintenance IP assigned to the device
	AccessPublicIpv6 interface{}
	// If true, a device with OS `custom_ipxe` will
	// continue to boot via iPXE on reboots.
	AlwaysPxe interface{}
	// monthly or hourly
	BillingCycle interface{}
	// The timestamp for when the device was created
	Created interface{}
	// Description string for the device
	Description interface{}
	// The facility in which to create the device. To find the facility code, visit [Facilities API docs](https://www.packet.net/developers/api/#facilities), set your API auth token in the top of the page and see JSON from the API response.
	Facility interface{}
	// The id of hardware reservation where you want this device deployed, or `next-available` if you want to pick your next available reservation automatically.
	HardwareReservationId interface{}
	// The device name
	Hostname interface{}
	// URL pointing to a hosted iPXE script. More
	// information is in the
	// [Custom iPXE](https://help.packet.net/article/26-custom-ipxe)
	// doc.
	IpxeScriptUrl interface{}
	// Whether the device is locked
	Locked interface{}
	// The device's private and public IP (v4 and v6) network details
	Networks interface{}
	// The operating system slug. To find the slug, or visit [Operating Systems API docs](https://www.packet.net/developers/api/#operatingsystems), set your API auth token in the top of the page and see JSON from the API response.
	OperatingSystem interface{}
	// The device plan slug. To find the plan slug, visit [Device plans API docs](https://www.packet.net/developers/api/#plans), set your auth token in the top of the page and see JSON from the API response.
	Plan interface{}
	// The id of the project in which to create the device
	ProjectId interface{}
	// Size of allocated subnet, more
	// information is in the
	// [Custom Subnet Size](https://help.packet.net/article/55-custom-subnet-size) doc.
	PublicIpv4SubnetSize interface{}
	// Root password to the server (disabled after 24 hours)
	RootPassword interface{}
	// The status of the device
	State interface{}
	// JSON for custom partitioning. Only usable on reserved hardware. More information in in the [Custom Partitioning and RAID](https://help.packet.net/article/61-custom-partitioning-raid) doc.
	Storage interface{}
	// Tags attached to the device
	Tags interface{}
	// The timestamp for the last time the device was updated
	Updated interface{}
	// A string of the desired User Data for the device.
	UserData interface{}
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// If true, a device with OS `custom_ipxe` will
	// continue to boot via iPXE on reboots.
	AlwaysPxe interface{}
	// monthly or hourly
	BillingCycle interface{}
	// Description string for the device
	Description interface{}
	// The facility in which to create the device. To find the facility code, visit [Facilities API docs](https://www.packet.net/developers/api/#facilities), set your API auth token in the top of the page and see JSON from the API response.
	Facility interface{}
	// The id of hardware reservation where you want this device deployed, or `next-available` if you want to pick your next available reservation automatically.
	HardwareReservationId interface{}
	// The device name
	Hostname interface{}
	// URL pointing to a hosted iPXE script. More
	// information is in the
	// [Custom iPXE](https://help.packet.net/article/26-custom-ipxe)
	// doc.
	IpxeScriptUrl interface{}
	// The operating system slug. To find the slug, or visit [Operating Systems API docs](https://www.packet.net/developers/api/#operatingsystems), set your API auth token in the top of the page and see JSON from the API response.
	OperatingSystem interface{}
	// The device plan slug. To find the plan slug, visit [Device plans API docs](https://www.packet.net/developers/api/#plans), set your auth token in the top of the page and see JSON from the API response.
	Plan interface{}
	// The id of the project in which to create the device
	ProjectId interface{}
	// Size of allocated subnet, more
	// information is in the
	// [Custom Subnet Size](https://help.packet.net/article/55-custom-subnet-size) doc.
	PublicIpv4SubnetSize interface{}
	// JSON for custom partitioning. Only usable on reserved hardware. More information in in the [Custom Partitioning and RAID](https://help.packet.net/article/61-custom-partitioning-raid) doc.
	Storage interface{}
	// Tags attached to the device
	Tags interface{}
	// A string of the desired User Data for the device.
	UserData interface{}
}
