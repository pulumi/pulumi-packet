// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package packet

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to attach elastic IP subnets to devices.
// 
// To attach an IP subnet from a reserved block to a provisioned device, you must derive a subnet CIDR belonging to
// one of your reserved blocks in the same project and facility as the target device.
// 
// For example, you have reserved IPv4 address block 147.229.10.152/30, you can choose to assign either the whole
// block as one subnet to a device; or 2 subnets with CIDRs 147.229.10.152/31' and 147.229.10.154/31; or 4 subnets
// with mask prefix length 32. More about the elastic IP subnets is [here](https://help.packet.net/article/54-elastic-ips).
// 
// Device and reserved block must be in the same facility.
type IpAttachment struct {
	s *pulumi.ResourceState
}

// NewIpAttachment registers a new resource with the given unique name, arguments, and options.
func NewIpAttachment(ctx *pulumi.Context,
	name string, args *IpAttachmentArgs, opts ...pulumi.ResourceOpt) (*IpAttachment, error) {
	if args == nil || args.CidrNotation == nil {
		return nil, errors.New("missing required argument 'CidrNotation'")
	}
	if args == nil || args.DeviceId == nil {
		return nil, errors.New("missing required argument 'DeviceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cidrNotation"] = nil
		inputs["deviceId"] = nil
	} else {
		inputs["cidrNotation"] = args.CidrNotation
		inputs["deviceId"] = args.DeviceId
	}
	inputs["address"] = nil
	inputs["addressFamily"] = nil
	inputs["cidr"] = nil
	inputs["gateway"] = nil
	inputs["global"] = nil
	inputs["manageable"] = nil
	inputs["management"] = nil
	inputs["netmask"] = nil
	inputs["network"] = nil
	inputs["public"] = nil
	s, err := ctx.RegisterResource("packet:index/ipAttachment:IpAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IpAttachment{s: s}, nil
}

// GetIpAttachment gets an existing IpAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IpAttachmentState, opts ...pulumi.ResourceOpt) (*IpAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["addressFamily"] = state.AddressFamily
		inputs["cidr"] = state.Cidr
		inputs["cidrNotation"] = state.CidrNotation
		inputs["deviceId"] = state.DeviceId
		inputs["gateway"] = state.Gateway
		inputs["global"] = state.Global
		inputs["manageable"] = state.Manageable
		inputs["management"] = state.Management
		inputs["netmask"] = state.Netmask
		inputs["network"] = state.Network
		inputs["public"] = state.Public
	}
	s, err := ctx.ReadResource("packet:index/ipAttachment:IpAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IpAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IpAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IpAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *IpAttachment) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// Address family as integer (4 or 6)
func (r *IpAttachment) AddressFamily() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["addressFamily"])
}

// length of CIDR prefix of the subnet as integer
func (r *IpAttachment) Cidr() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["cidr"])
}

// CIDR notation of subnet from block reserved in the same
// project and facility as the device
func (r *IpAttachment) CidrNotation() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidrNotation"])
}

// ID of device to which to assign the subnet
func (r *IpAttachment) DeviceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deviceId"])
}

// IP address of gateway for the subnet
func (r *IpAttachment) Gateway() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gateway"])
}

func (r *IpAttachment) Global() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["global"])
}

func (r *IpAttachment) Manageable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["manageable"])
}

func (r *IpAttachment) Management() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["management"])
}

// Subnet mask in decimal notation, e.g. "255.255.255.0"
func (r *IpAttachment) Netmask() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["netmask"])
}

// Subnet network address
func (r *IpAttachment) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// boolean flag whether subnet is reachable from the Internet
func (r *IpAttachment) Public() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["public"])
}

// Input properties used for looking up and filtering IpAttachment resources.
type IpAttachmentState struct {
	Address interface{}
	// Address family as integer (4 or 6)
	AddressFamily interface{}
	// length of CIDR prefix of the subnet as integer
	Cidr interface{}
	// CIDR notation of subnet from block reserved in the same
	// project and facility as the device
	CidrNotation interface{}
	// ID of device to which to assign the subnet
	DeviceId interface{}
	// IP address of gateway for the subnet
	Gateway interface{}
	Global interface{}
	Manageable interface{}
	Management interface{}
	// Subnet mask in decimal notation, e.g. "255.255.255.0"
	Netmask interface{}
	// Subnet network address
	Network interface{}
	// boolean flag whether subnet is reachable from the Internet
	Public interface{}
}

// The set of arguments for constructing a IpAttachment resource.
type IpAttachmentArgs struct {
	// CIDR notation of subnet from block reserved in the same
	// project and facility as the device
	CidrNotation interface{}
	// ID of device to which to assign the subnet
	DeviceId interface{}
}
