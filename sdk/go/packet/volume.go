// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package packet

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Volume struct {
	pulumi.CustomResourceState

	// A list of attachments, each with it's own `href` attribute
	Attachments VolumeAttachmentTypeArrayOutput `pulumi:"attachments"`
	// The billing cycle, defaults to "hourly"
	BillingCycle pulumi.StringOutput `pulumi:"billingCycle"`
	// The timestamp for when the volume was created
	Created pulumi.StringOutput `pulumi:"created"`
	// Optional description for the volume
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The facility to create the volume in
	Facility pulumi.StringOutput `pulumi:"facility"`
	// Lock or unlock the volume
	Locked pulumi.BoolPtrOutput `pulumi:"locked"`
	// The name of the volume
	Name pulumi.StringOutput `pulumi:"name"`
	// The service plan slug of the volume
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The packet project ID to deploy the volume in
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The size in GB to make the volume
	Size pulumi.IntOutput `pulumi:"size"`
	// Optional list of snapshot policies
	SnapshotPolicies VolumeSnapshotPolicyArrayOutput `pulumi:"snapshotPolicies"`
	// The state of the volume
	State pulumi.StringOutput `pulumi:"state"`
	// The timestamp for the last time the volume was updated
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil || args.Facility == nil {
		return nil, errors.New("missing required argument 'Facility'")
	}
	if args == nil || args.Plan == nil {
		return nil, errors.New("missing required argument 'Plan'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	if args == nil {
		args = &VolumeArgs{}
	}
	var resource Volume
	err := ctx.RegisterResource("packet:index/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("packet:index/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// A list of attachments, each with it's own `href` attribute
	Attachments []VolumeAttachmentType `pulumi:"attachments"`
	// The billing cycle, defaults to "hourly"
	BillingCycle *string `pulumi:"billingCycle"`
	// The timestamp for when the volume was created
	Created *string `pulumi:"created"`
	// Optional description for the volume
	Description *string `pulumi:"description"`
	// The facility to create the volume in
	Facility *string `pulumi:"facility"`
	// Lock or unlock the volume
	Locked *bool `pulumi:"locked"`
	// The name of the volume
	Name *string `pulumi:"name"`
	// The service plan slug of the volume
	Plan *string `pulumi:"plan"`
	// The packet project ID to deploy the volume in
	ProjectId *string `pulumi:"projectId"`
	// The size in GB to make the volume
	Size *int `pulumi:"size"`
	// Optional list of snapshot policies
	SnapshotPolicies []VolumeSnapshotPolicy `pulumi:"snapshotPolicies"`
	// The state of the volume
	State *string `pulumi:"state"`
	// The timestamp for the last time the volume was updated
	Updated *string `pulumi:"updated"`
}

type VolumeState struct {
	// A list of attachments, each with it's own `href` attribute
	Attachments VolumeAttachmentTypeArrayInput
	// The billing cycle, defaults to "hourly"
	BillingCycle pulumi.StringPtrInput
	// The timestamp for when the volume was created
	Created pulumi.StringPtrInput
	// Optional description for the volume
	Description pulumi.StringPtrInput
	// The facility to create the volume in
	Facility pulumi.StringPtrInput
	// Lock or unlock the volume
	Locked pulumi.BoolPtrInput
	// The name of the volume
	Name pulumi.StringPtrInput
	// The service plan slug of the volume
	Plan pulumi.StringPtrInput
	// The packet project ID to deploy the volume in
	ProjectId pulumi.StringPtrInput
	// The size in GB to make the volume
	Size pulumi.IntPtrInput
	// Optional list of snapshot policies
	SnapshotPolicies VolumeSnapshotPolicyArrayInput
	// The state of the volume
	State pulumi.StringPtrInput
	// The timestamp for the last time the volume was updated
	Updated pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// The billing cycle, defaults to "hourly"
	BillingCycle *string `pulumi:"billingCycle"`
	// Optional description for the volume
	Description *string `pulumi:"description"`
	// The facility to create the volume in
	Facility string `pulumi:"facility"`
	// Lock or unlock the volume
	Locked *bool `pulumi:"locked"`
	// The service plan slug of the volume
	Plan string `pulumi:"plan"`
	// The packet project ID to deploy the volume in
	ProjectId string `pulumi:"projectId"`
	// The size in GB to make the volume
	Size int `pulumi:"size"`
	// Optional list of snapshot policies
	SnapshotPolicies []VolumeSnapshotPolicy `pulumi:"snapshotPolicies"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The billing cycle, defaults to "hourly"
	BillingCycle pulumi.StringPtrInput
	// Optional description for the volume
	Description pulumi.StringPtrInput
	// The facility to create the volume in
	Facility pulumi.StringInput
	// Lock or unlock the volume
	Locked pulumi.BoolPtrInput
	// The service plan slug of the volume
	Plan pulumi.StringInput
	// The packet project ID to deploy the volume in
	ProjectId pulumi.StringInput
	// The size in GB to make the volume
	Size pulumi.IntInput
	// Optional list of snapshot policies
	SnapshotPolicies VolumeSnapshotPolicyArrayInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}
