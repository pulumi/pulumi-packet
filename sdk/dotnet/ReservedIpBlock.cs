// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Packet
{
    /// <summary>
    /// Provides a resource to create and manage blocks of reserved IP addresses in a project.
    /// 
    /// When a user provisions first device in a facility, Packet API automatically allocates IPv6/56 and private IPv4/25 blocks.
    /// The new device then gets IPv6 and private IPv4 addresses from those block. It also gets a public IPv4/31 address.
    /// Every new device in the project and facility will automatically get IPv6 and private IPv4 addresses from these pre-allocated blocks.
    /// The IPv6 and private IPv4 blocks can't be created, only imported. With this resource, it's possible to create either public IPv4 blocks or global IPv4 blocks.
    /// 
    /// Public blocks are allocated in a facility. Addresses from public blocks can only be assigned to devices in the facility. Public blocks can have mask from /24 (256 addresses) to /32 (1 address). If you create public block with this resource, you must fill the facility argmument.
    /// 
    /// Addresses from global blocks can be assigned in any facility. Global blocks can have mask from /30 (4 addresses), to /32 (1 address). If you create global block with this resource, you must specify type = "global_ipv4" and you must omit the facility argument.
    /// 
    /// Once IP block is allocated or imported, an address from it can be assigned to device with the `packet..IpAttachment` resource.
    /// </summary>
    public partial class ReservedIpBlock : Pulumi.CustomResource
    {
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        /// <summary>
        /// Address family as integer (4 or 6)
        /// </summary>
        [Output("addressFamily")]
        public Output<int> AddressFamily { get; private set; } = null!;

        /// <summary>
        /// length of CIDR prefix of the block as integer
        /// </summary>
        [Output("cidr")]
        public Output<int> Cidr { get; private set; } = null!;

        /// <summary>
        /// Address and mask in CIDR notation, e.g. "147.229.15.30/31"
        /// </summary>
        [Output("cidrNotation")]
        public Output<string> CidrNotation { get; private set; } = null!;

        /// <summary>
        /// Arbitrary description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4
        /// </summary>
        [Output("facility")]
        public Output<string?> Facility { get; private set; } = null!;

        [Output("gateway")]
        public Output<string> Gateway { get; private set; } = null!;

        /// <summary>
        /// boolean flag whether addresses from a block are global (i.e. can be assigned in any facility)
        /// </summary>
        [Output("global")]
        public Output<bool> Global { get; private set; } = null!;

        [Output("manageable")]
        public Output<bool> Manageable { get; private set; } = null!;

        [Output("management")]
        public Output<bool> Management { get; private set; } = null!;

        /// <summary>
        /// Mask in decimal notation, e.g. "255.255.255.0"
        /// </summary>
        [Output("netmask")]
        public Output<string> Netmask { get; private set; } = null!;

        /// <summary>
        /// Network IP address portion of the block specification
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The packet project ID where to allocate the address block
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// boolean flag whether addresses from a block are public
        /// </summary>
        [Output("public")]
        public Output<bool> Public { get; private set; } = null!;

        /// <summary>
        /// The number of allocated /32 addresses, a power of 2
        /// </summary>
        [Output("quantity")]
        public Output<int> Quantity { get; private set; } = null!;

        /// <summary>
        /// Either "global_ipv4" or "public_ipv4", defaults to "public_ipv4" for backward compatibility
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ReservedIpBlock resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReservedIpBlock(string name, ReservedIpBlockArgs args, CustomResourceOptions? options = null)
            : base("packet:index/reservedIpBlock:ReservedIpBlock", name, args ?? new ReservedIpBlockArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReservedIpBlock(string name, Input<string> id, ReservedIpBlockState? state = null, CustomResourceOptions? options = null)
            : base("packet:index/reservedIpBlock:ReservedIpBlock", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReservedIpBlock resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReservedIpBlock Get(string name, Input<string> id, ReservedIpBlockState? state = null, CustomResourceOptions? options = null)
        {
            return new ReservedIpBlock(name, id, state, options);
        }
    }

    public sealed class ReservedIpBlockArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Arbitrary description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4
        /// </summary>
        [Input("facility")]
        public Input<string>? Facility { get; set; }

        /// <summary>
        /// The packet project ID where to allocate the address block
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The number of allocated /32 addresses, a power of 2
        /// </summary>
        [Input("quantity", required: true)]
        public Input<int> Quantity { get; set; } = null!;

        /// <summary>
        /// Either "global_ipv4" or "public_ipv4", defaults to "public_ipv4" for backward compatibility
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ReservedIpBlockArgs()
        {
        }
    }

    public sealed class ReservedIpBlockState : Pulumi.ResourceArgs
    {
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// Address family as integer (4 or 6)
        /// </summary>
        [Input("addressFamily")]
        public Input<int>? AddressFamily { get; set; }

        /// <summary>
        /// length of CIDR prefix of the block as integer
        /// </summary>
        [Input("cidr")]
        public Input<int>? Cidr { get; set; }

        /// <summary>
        /// Address and mask in CIDR notation, e.g. "147.229.15.30/31"
        /// </summary>
        [Input("cidrNotation")]
        public Input<string>? CidrNotation { get; set; }

        /// <summary>
        /// Arbitrary description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4
        /// </summary>
        [Input("facility")]
        public Input<string>? Facility { get; set; }

        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// boolean flag whether addresses from a block are global (i.e. can be assigned in any facility)
        /// </summary>
        [Input("global")]
        public Input<bool>? Global { get; set; }

        [Input("manageable")]
        public Input<bool>? Manageable { get; set; }

        [Input("management")]
        public Input<bool>? Management { get; set; }

        /// <summary>
        /// Mask in decimal notation, e.g. "255.255.255.0"
        /// </summary>
        [Input("netmask")]
        public Input<string>? Netmask { get; set; }

        /// <summary>
        /// Network IP address portion of the block specification
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The packet project ID where to allocate the address block
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// boolean flag whether addresses from a block are public
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// The number of allocated /32 addresses, a power of 2
        /// </summary>
        [Input("quantity")]
        public Input<int>? Quantity { get; set; }

        /// <summary>
        /// Either "global_ipv4" or "public_ipv4", defaults to "public_ipv4" for backward compatibility
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ReservedIpBlockState()
        {
        }
    }
}
