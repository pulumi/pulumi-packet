# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from . import utilities, tables

class ReservedIpBlock(pulumi.CustomResource):
    address: pulumi.Output[str]
    address_family: pulumi.Output[int]
    """
    Address family as integer (4 or 6)
    """
    cidr: pulumi.Output[int]
    """
    length of CIDR prefix of the block as integer
    """
    cidr_notation: pulumi.Output[str]
    """
    Address and mask in CIDR notation, e.g. "147.229.15.30/31"
    """
    facility: pulumi.Output[str]
    """
    The facility where to allocate the address block
    """
    gateway: pulumi.Output[str]
    manageable: pulumi.Output[bool]
    management: pulumi.Output[bool]
    netmask: pulumi.Output[str]
    """
    Mask in decimal notation, e.g. "255.255.255.0"
    """
    network: pulumi.Output[str]
    """
    Network IP address portion of the block specification
    """
    project_id: pulumi.Output[str]
    """
    The packet project ID where to allocate the address block
    """
    public: pulumi.Output[bool]
    """
    boolean flag whether addresses from a block are public
    """
    quantity: pulumi.Output[int]
    """
    The number of allocated /32 addresses, a power of 2
    """
    def __init__(__self__, __name__, __opts__=None, facility=None, project_id=None, quantity=None):
        """
        Provides a resource to create and manage blocks of reserved IP addresses in a project.
        
        When user provision first device in a facility, Packet automatically allocates IPv6/56 and private IPv4/25 blocks.
        The new device then gets IPv6 and private IPv4 addresses from those block. It also gets a public IPv4/31 address.
        Every new device in the project and facility will automatically get IPv6 and private IPv4 addresses from pre-allocated i
        blocks.
        The IPv6 and private IPv4 blocks can't be created, only imported.
        
        It is only possible to create public IPv4 blocks, with masks from /24 (256 addresses) to /32 (1 address).
        
        Once IP block is allocated or imported, an address from it can be assigned to device with the `packet_ip_attachment` resource.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] facility: The facility where to allocate the address block
        :param pulumi.Input[str] project_id: The packet project ID where to allocate the address block
        :param pulumi.Input[int] quantity: The number of allocated /32 addresses, a power of 2
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not facility:
            raise TypeError('Missing required property facility')
        __props__['facility'] = facility

        if not project_id:
            raise TypeError('Missing required property project_id')
        __props__['project_id'] = project_id

        if not quantity:
            raise TypeError('Missing required property quantity')
        __props__['quantity'] = quantity

        __props__['address'] = None
        __props__['address_family'] = None
        __props__['cidr'] = None
        __props__['cidr_notation'] = None
        __props__['gateway'] = None
        __props__['manageable'] = None
        __props__['management'] = None
        __props__['netmask'] = None
        __props__['network'] = None
        __props__['public'] = None

        super(ReservedIpBlock, __self__).__init__(
            'packet:index/reservedIpBlock:ReservedIpBlock',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

