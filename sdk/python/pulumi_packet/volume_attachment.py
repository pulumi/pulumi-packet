# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from . import utilities, tables

class VolumeAttachment(pulumi.CustomResource):
    device_id: pulumi.Output[str]
    """
    The ID of the device to which the volume should be attached
    """
    volume_id: pulumi.Output[str]
    """
    The ID of the volume to attach
    """
    def __init__(__self__, __name__, __opts__=None, device_id=None, volume_id=None):
        """
        Provides attachment of Packet Block Storage Volume to Devices.
        
        Device and volume must be in the same location (facility).
        
        Once attached by Terraform, they must then be mounted using the `packet_block_attach` and `packet_block_detach` scripts.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] device_id: The ID of the device to which the volume should be attached
        :param pulumi.Input[str] volume_id: The ID of the volume to attach
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not device_id:
            raise TypeError('Missing required property device_id')
        __props__['device_id'] = device_id

        if not volume_id:
            raise TypeError('Missing required property volume_id')
        __props__['volume_id'] = volume_id

        super(VolumeAttachment, __self__).__init__(
            'packet:index/volumeAttachment:VolumeAttachment',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

