# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class VLAN(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    Description string
    """
    facility: pulumi.Output[str]
    """
    Facility where to create the VLAN
    """
    project_id: pulumi.Output[str]
    """
    ID of parent project
    """
    vxlan: pulumi.Output[int]
    """
    VXLAN segment ID
    """
    def __init__(__self__, resource_name, opts=None, description=None, facility=None, project_id=None, __name__=None, __opts__=None):
        """
        Provides a resource to allow users to manage Virtual Networks in their projects. VLANs are used in [Layer 2 networking setup](https://packet.kayako.com/article/57-layer-2-overview).
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description string
        :param pulumi.Input[str] facility: Facility where to create the VLAN
        :param pulumi.Input[str] project_id: ID of parent project
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        if facility is None:
            raise TypeError('Missing required property facility')
        __props__['facility'] = facility

        if project_id is None:
            raise TypeError('Missing required property project_id')
        __props__['project_id'] = project_id

        __props__['vxlan'] = None

        super(VLAN, __self__).__init__(
            'packet:index/vLAN:VLAN',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

